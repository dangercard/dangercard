{"version":3,"sources":["components/NavBar.js","components/Home.js","components/AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","isOpen","state","handleResize","windowWidth","window","innerWidth","addEventListener","bind","_this2","react_default","a","createElement","Navbar","dark","expand","className","Container","NavbarBrand","onClick","changePage","NavbarToggler","Collapse","navbar","Nav","NavItem","style","backgroundColor","NavLink","href","index_esm","Component","Home","Jumbotron","Button","AboutMe","tab","activeTab","fluid","Row","top","transform","Col","sm","Card","CardImg","width","src","alt","CardBody","CardTitle","CardSubtitle","CardText","border","tabs","TabContent","TabPane","tabId","body","App","page","currentPage","components_Home","components_AboutMe","components_NavBar","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27976fc7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Container,\n} from \"reactstrap\";\nimport {FaGithub, FaInstagram} from 'react-icons/fa';\nimport '../App.css';\n\nclass NavBar extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isOpen: false,\n            windowWidth: window.innerWidth,\n        };\n    }\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen,\n        });\n    }\n\n    handleResize = () => {\n        this.setState({\n            windowWidth: window.innerWidth,\n        });\n    }\n\n    componentDidMount(){\n\n        // Constantly update state window width.\n        window.addEventListener('resize', this.handleResize.bind(this));\n    }\n\n    render(){\n        return(\n            <div>\n                <Navbar dark expand=\"sm\" className=\"nav-bar\">\n                    <Container>\n                        <NavbarBrand className=\"nav-brand\" onClick={() => this.props.changePage(\"Home\")}>Alejandro Deloach</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle} />\n                        <Collapse isOpen={this.state.isOpen} navbar>\n\n                            <Nav className=\"mr-auto\" navbar>\n                                <NavItem className=\"nav-item\" onClick={() => this.props.changePage(\"About Me\")} >\n                                    About Me\n                                </NavItem>\n                            </Nav>\n                            <hr className=\"my-2\" style={{backgroundColor:\"#6b6e70\"}}/>\n                            \n                            <Nav className=\"ml-auto\" navbar>   \n                                <NavItem>\n                                    <NavLink className=\"nav-link\" href=\"https://github.com/dangercard\">{(this.state.windowWidth <= 575) ? \"Github\" : <FaGithub/>}</NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" href=\"https://www.instagram.com/alejandrodeloach/\">{(this.state.windowWidth <= 575) ? \"Instagram\" : <FaInstagram/>}</NavLink>\n                                </NavItem>\n                            </Nav>\n\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport \"../App.css\";\nimport { Jumbotron, Button } from \"reactstrap\";\n\nfunction Home() {\n  return (\n    <Jumbotron className=\"jumb\">\n      <h1 className=\"home-title\">Welcome!</h1>\n\n      <p className=\"lead home-text\">\n        This is a simple portfolio page built using React and Reactstrap.\n        Besides my information, you can find a variety of random things to play\n        with.\n      </p>\n\n      <hr className=\"my-2\" style={{ backgroundColor: \"#6b6e70\" }} />\n\n      <p className=\"home-text\">\n        If you're interested in seeing the code for this page, click the button\n        below to see the repo.\n      </p>\n\n      <p className=\"lead\">\n        <Button className=\"btn-green\">Learn More</Button>\n      </p>\n    </Jumbotron>\n  );\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport {\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  Card,\n  Button,\n  CardTitle,\n  CardImg,\n  CardBody,\n  CardSubtitle,\n  CardText,\n  Row,\n  Col,\n  Container,\n} from \"reactstrap\";\nimport \"../App.css\";\n\nclass AboutMe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: \"1\",\n    };\n  }\n\n  toggle = (tab) => {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Container fluid>\n        <Row style={{top: \"20%\", transform: \"translate(0%, 20%)\"}}>\n          <Col sm=\"3\">\n            <Card>\n              <CardImg\n                top\n                width=\"100%\"\n                src=\"https://placeholdit.imgix.net/~text?txtsize=33&txt=318%C3%97180&w=318&h=180\"\n                alt=\"Card image cap\"\n              />\n              <CardBody>\n                <CardTitle>Card title</CardTitle>\n                <CardSubtitle>Card subtitle</CardSubtitle>\n                <CardText>\n                  Some quick example text to build on the card title and make up\n                  the bulk of the card's content.\n                </CardText>\n                <Button>Button</Button>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col sm=\"9\">\n            <div style={{ border: \"1px solid #ccc\" }}>\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    onClick={() => {\n                      this.toggle(\"1\");\n                    }}\n                  >\n                    Tab1\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    onClick={() => {\n                      this.toggle(\"2\");\n                    }}\n                  >\n                    Moar Tabs\n                  </NavLink>\n                </NavItem>\n              </Nav>\n              <TabContent activeTab={this.state.activeTab}>\n                <TabPane tabId=\"1\">\n                  <Row>\n                    <Col sm=\"12\">\n                      <h4>Tab 1 Contents</h4>\n                    </Col>\n                  </Row>\n                </TabPane>\n                <TabPane tabId=\"2\">\n                  <Row>\n                    <Col sm=\"6\">\n                      <Card body>\n                        <CardTitle>Special Title Treatment</CardTitle>\n                        <CardText>\n                          With supporting text below as a natural lead-in to\n                          additional content.\n                        </CardText>\n                        <Button>Go somewhere</Button>\n                      </Card>\n                    </Col>\n                    <Col sm=\"6\">\n                      <Card body>\n                        <CardTitle>Special Title Treatment</CardTitle>\n                        <CardText>\n                          With supporting text below as a natural lead-in to\n                          additional content.\n                        </CardText>\n                        <Button>Go somewhere</Button>\n                      </Card>\n                    </Col>\n                  </Row>\n                </TabPane>\n              </TabContent>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default AboutMe;\n","import React, {Component} from 'react';\nimport NavBar from './components/NavBar';\nimport Home from './components/Home';\nimport AboutMe from './components/AboutMe';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import Iframe from 'react-iframe';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      currentPage: \"Home\",\n    }\n  }\n\n  changePage = (page) => {\n    this.setState({\n      currentPage: page\n    });\n  }\n\n  render(){\n    let page;\n    if(this.state.currentPage === \"Home\")\n    {\n      page = <Home/>;\n    }\n    else if(this.state.currentPage === \"About Me\")\n    {\n      // page = <Iframe url=\"http://www.youtube.com/embed/?listType=user_uploads&list=Thefearalcarrot\"\n      // width=\"800px\"\n      // height=\"450px\"\n      // id=\"myId\"\n      // display=\"initial\"\n      // position=\"relative\"/>;\n      page = <AboutMe/>;\n    }\n    return (\n      <div className=\"App\">\n        <NavBar changePage={this.changePage}/>\n          {page}\n       \n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}